// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model Boutique {
  id          String    @id @db.VarChar(4)
  name        String
}

model Cheque{
  id            String    @id @default(cuid())
  codeBanque String  @db.VarChar(5)
  nche String @db.VarChar(7)
  lib String 
  montant Float
  date DateTime
  statusPayement Boolean  @default(false)
  dateBoutique DateTime 
  ver String?
  restapaye Float   
  codeBoutique String @db.VarChar(4)
  payement Float @default(0)
  type String?
  nver String? @db.VarChar(7)
  reglement Reglement[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reglement {
  id            String    @id @default(cuid())
  method method
  montantPaye Float
  cheque   Cheque @relation(fields: [chequeId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  chequeId String
  dateReglement DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


enum method {
  ESPECE
  CHEQUE
  OR
  AVOIR
  AUTRE
} 



















enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}